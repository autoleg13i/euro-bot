import os
import json
import logging
import asyncio
import aiohttp
from dotenv import load_dotenv
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

load_dotenv()
TOKEN = "7601628351:AAG-GL-Z83lby9NMZScU0Jx79DvFkAVxL-E"
CHAT_ID = int(os.getenv("CHAT_ID"))
MINFIN_TOKEN = os.getenv("MINFIN_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ ===
PRIVAT_URL = "https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5"

async def get_from_privat(currency: str) -> str | None:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(PRIVAT_URL) as response:
                data = await response.json()
                for item in data:
                    if item["ccy"].upper() == currency.upper():
                        return f"*{currency}* (–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫):\n–ö—É–ø—ñ–≤–ª—è: `{item['buy']}`\n–ü—Ä–æ–¥–∞–∂: `{item['sale']}`"
    except Exception as e:
        logger.warning(f"–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ error: {e}")
    return None

# === –ú—ñ–Ω—Ñ—ñ–Ω ===
async def get_from_minfin(currency: str) -> str | None:
    try:
        url = f"https://api.minfin.com.ua/fb/currency/list?currency={currency}&apiKey={MINFIN_TOKEN}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.json()
                banks = [b for b in data if b.get("bid") not in (None, "0.00") and b.get("ask") not in (None, "0.00")]
                for bank in banks:
                    if bank["bank"] in ("–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –ë–∞–Ω–∫", "–ö—Ä–µ–¥–æ–±–∞–Ω–∫", "–ö—Ä–µ–¥–∏—Ç –î–Ω—ñ–ø—Ä–æ"):
                        return f"*{currency}* ({bank['bank']}):\n–ö—É–ø—ñ–≤–ª—è: `{bank['bid']}`\n–ü—Ä–æ–¥–∞–∂: `{bank['ask']}`"
    except Exception as e:
        logger.warning(f"–ú—ñ–Ω—Ñ—ñ–Ω error: {e}")
    return None

# === Binance ===
async def get_from_binance(currency: str) -> str | None:
    try:
        symbol = f"{currency.upper()}UAH"
        url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if "price" in data:
                        return f"*{currency}* (Binance):\n–ü—Ä–æ–¥–∞–∂: `{data['price']}`"
    except Exception as e:
        logger.warning(f"Binance error: {e}")
    return None

# === Monobank ===
async def get_from_monobank(currency: str) -> str | None:
    try:
        code_map = {"USD": 840, "EUR": 978, "PLN": 985}
        code = code_map.get(currency.upper())
        if code is None:
            return None
        async with aiohttp.ClientSession() as session:
            async with session.get("https://api.monobank.ua/bank/currency") as response:
                data = await response.json()
                for item in data:
                    if item.get("currencyCodeA") == code and item.get("currencyCodeB") == 980:
                        rate_buy = round(item["rateBuy"], 2)
                        rate_sell = round(item["rateSell"], 2)
                        return f"*{currency}* (Monobank):\n–ö—É–ø—ñ–≤–ª—è: `{rate_buy}`\n–ü—Ä–æ–¥–∞–∂: `{rate_sell}`"
    except Exception as e:
        logger.warning(f"Mono error: {e}")
    return None

# === –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É ===
async def get_exchange_rate(currency: str) -> str:
    sources = [get_from_minfin, get_from_privat, get_from_binance, get_from_monobank]
    for source in sources:
        rate = await source(currency)
        if rate:
            return rate
    return f"‚ùå –ö—É—Ä—Å –¥–ª—è {currency} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª–∞—Ö."

# === Telegram-–æ–±—Ä–æ–±–Ω–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.bot_data["currency"] = context.bot_data.get("currency", "EUR")
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—é! –ë–æ—Ç –Ω–∞–¥—Å–∏–ª–∞—î –∫—É—Ä—Å —â–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –æ 9:00.\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/seteur\n/setusd\n/setpln\n/price"
    )

async def set_currency(update: Update, context: ContextTypes.DEFAULT_TYPE, value: str):
    context.bot_data["currency"] = value
    await update.message.reply_text(f"‚úÖ –í–∞–ª—é—Ç–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ {value}")

async def set_eur(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_currency(update, context, "EUR")

async def set_usd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_currency(update, context, "USD")

async def set_pln(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_currency(update, context, "PLN")

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    currency = context.bot_data.get("currency", "EUR")
    rate = await get_exchange_rate(currency)
    await update.message.reply_text(rate, parse_mode="Markdown")

# === –©–æ—Ç–∏–∂–Ω–µ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
async def send_weekly_update(app):
    currency = app.bot_data.get("currency", "EUR")
    rate = await get_exchange_rate(currency)
    await app.bot.send_message(chat_id=CHAT_ID, text=f"üìà –©–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∫—É—Ä—Å:\n{rate}", parse_mode="Markdown")

# === main ===
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("seteur", set_eur))
    app.add_handler(CommandHandler("setusd", set_usd))
    app.add_handler(CommandHandler("setpln", set_pln))
    app.add_handler(CommandHandler("price", price))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_weekly_update, trigger="cron", day_of_week="mon", hour=9, minute=0, args=[app])
    scheduler.start()

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –æ 9:00...")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())